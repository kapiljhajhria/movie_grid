{"version":3,"sources":["MoviePoster/index.js","MovieGrid/index.js","MovieData/index.js","MovieDetails/index.js","SearchPage/index.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","movie","this","props","to","id","style","color","textDecoration","className","src","poster_path","alt","original_title","overview","substr","vote_average","React","Component","MoviesGrid","allMoviesData","map","MovieData","useState","match","params","searchQuery","data","setData","setIsLoading","page","parseInt","a","noOfPages","i","url","fetch","response","json","jsonMap","tempData","concat","useEffect","console","count","getMovieData","log","window","onpopstate","MovieGrid","MovieDetails","state","isLoading","getApiKey","setState","movieDetails","backdrop_path","title","tagline","genres","el","onClick","open","videos","results","key","SearchPage","value","handleChange","bind","handleSubmit","event","target","alert","preventDefault","onSubmit","type","onChange","App","path","component","exact","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e1517f5.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\n\nclass MoviePoster extends React.Component {\n    render() {\n        const movie =this.props.movie;\n        return (\n            <Link to={`/moviedetails/${movie.id}`} style={{ color: 'inherit', textDecoration: 'inherit'}}>\n                <div className=\"movieCard\">\n                    <div className=\"movie-poster\" >\n                        <div>\n                            <img className=\"movieimg\" src={`https://image.tmdb.org/t/p/original${movie.poster_path}`} alt=\"\"/>\n                        </div>\n                    </div>\n                    <div className=\"mv-inf\">\n                        <div className=\"mv-inf-top\">\n                            <div className=\"mv-inf-title\">\n                                {movie.original_title}\n                            </div>\n                        </div>\n                        <div>\n                            <hr/>\n                        </div>\n                        <div className=\"mv-inf-btm\">\n                            <div className=\"mv-inf-overview\">\n                                {movie.overview.substr(0,70)}\n                            </div>\n                            <div className=\"mv-inf-vote-avg\">\n                                {movie.vote_average}\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                </div>\n            </Link>\n\n\n        );\n    }\n}\n\nexport default MoviePoster;","import React from 'react';\nimport MoviePoster from \"../MoviePoster\";\nimport './styles.css'\nimport '../moviedatabase'\nimport moviesInfoList from \"../moviedatabase\";\n\nclass MoviesGrid extends React.Component {\n\n    render() {\n        return (\n            <div className=\"moviesgrid\">\n                {this.props.allMoviesData.map((movie) => <MoviePoster movie={movie}/>)}\n            </div>\n        );\n    }\n}\n\n\nexport default MoviesGrid;","import React, {useEffect, useState} from 'react';\nimport MovieGrid from \"../MovieGrid\";\nimport './styles.css'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\n\nexport default function MovieData(props) {\n    const [searchQuery, setSearchQuery] = useState(props.match != null ? props.match.params.searchQuery : null,)\n    const [data, setData] = useState(null)\n    const [isLoading, setIsLoading] = useState(false)\n    // constructor(props)\n    // {\n    //     super(props);\n    //     this.state = {\n    //         searchQuery:\n    //         isLoading: false,\n    //         data: null,\n    //         pageNo: (props.match != null && props.page !== \"search\") ? parseInt(props.match.params.page) : 1,\n    //     }\n    // }\n\n// https://api.themoviedb.org/3/search/movie?api_key= + apikey + &language=en-US&query= + searchTerm\n    function getApiKey() {\n        return \"9455f2fb0b779e4e7588ad14649658d3\"\n    }\n\n    let page = (props.match != null && props.page !== \"search\") ? parseInt(props.match.params.page) : 1\n\n    async function getMovieData() {\n        setIsLoading(false)\n        setData(null)\n        let data = [];\n        let noOfPages = 1;\n\n        for (let i = 1; i <= noOfPages; i++) {\n            let url;\n            if (searchQuery == null)\n                url = \"https://api.themoviedb.org/3/discover/movie?api_key=\" + getApiKey() + \"&include_video=true&page=\" + page;\n            else {\n                url = \"https://api.themoviedb.org/3/search/movie?api_key=\" + getApiKey() + \"&include_video=true&language=en-US&query=\" + searchQuery;\n            }\n            let response = await fetch(url);\n            let jsonMap = await response.json();\n            let tempData = jsonMap['results'];\n            data = data.concat(tempData);\n        }\n        setData(data)\n        setIsLoading(true)\n    }\n\n    useEffect(() => {\n        console.count(\"useEffect called\")\n        getMovieData();\n        console.log(\"params match from component did mount \", props.match?.params || \"no params\")\n        window.onpopstate = function () {\n            console.count(\"button pressed\")\n\n\n        }\n    }, [page])\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n\n    // }\n\n    return (\n        !data ? (\n            <div className=\"App\">\n                <div className={\"loadingScreen-moviedetails\"}>\n                    <div className=\"lds-spinner\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        ) : (\n            <div className=\"page\">\n                <Link to={`/search`}>\n                    <button className=\"searchbtn\">\n                        Search\n                    </button>\n                </Link>\n                <MovieGrid allMoviesData={data}>\n\n                </MovieGrid>\n                <div className=\"bottomButtons\">\n                    {page > 1 ? <Link to={`/page/${page - 1}`}>\n                        <button className=\"prevBtn\">\n                            Previous\n                        </button>\n                    </Link> : \"\"}\n                    <Link to={`/page/${page + 1}`}>\n                        <button className=\"nxtBtn\">\n                            Next\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        )\n    )\n}\n\n\n","import React from 'react';\nimport './styles.css'\nimport MovieGrid from \"../MovieGrid\";\n\nexport default class MovieDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            isLoading: false,\n            data: null\n        }\n    }\n\n    // https://api.themoviedb.org/3/movie/102899?api_key=9455f2fb0b779e4e7588ad14649658d3\n    getApiKey() {\n        return \"9455f2fb0b779e4e7588ad14649658d3\";\n    }\n\n    async getMovieData() {\n        let url = \"https://api.themoviedb.org/3/movie/\" + this.state.id + \"?api_key=\" + this.getApiKey()+\"&append_to_response=videos\";\n        console.log('urls is:' + url);\n        let response = await fetch(url);\n        let data = await response.json();\n\n\n        this.setState({data: data, isLoading: true});\n        // return data;\n    }\n\n    componentDidMount() {\n        this.getMovieData();\n    }\n\n    render() {\n        let movieDetails = this.state.data;\n        return (\n            !this.state.isLoading ? (\n                <div className={\"loadingScreen-moviedetails\"}>\n                    <div className=\"lds-spinner\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            ) : (<div className=\"screen\">\n                <div className=\"black-overlay\">\n\n                </div>\n                <div className=\"background-img\">\n                    <img className=\"bg-img\" src={\"https://image.tmdb.org/t/p/original\" + movieDetails.backdrop_path}\n                         alt=\"\"/>\n                </div>\n                <div className=\"content\">\n                    <div className=\"poster-img\">\n                        <img src={\"https://image.tmdb.org/t/p/original\" + movieDetails.poster_path} alt=\"\"/>\n                    </div>\n\n                    <div className=\"mov-inf\">\n                        <div className=\"mov-name\">\n                            {movieDetails.title}\n\n                        </div>\n                        <div className=\"mov-tag\">\n                            {movieDetails.tagline}\n                        </div>\n                        <div className=\"mov-overview\">\n                            {movieDetails.overview}\n                        </div>\n                        <div className=\"mov-genres\">\n                            {movieDetails.genres.map((el) => <div className=\"genres\">\n                                {el['name']}\n                            </div>)}\n                        </div>\n                        <div className=\"videoBtn\" onClick={()=>window.open(\"https://www.youtube.com/watch?v=\"+movieDetails.videos.results[0].key)}>\n                            Watch Trailer\n                        </div>\n                    </div>\n\n                </div>\n            </div>)\n        );\n    }\n}","import React from 'react'\nimport './styles.css'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport MoviesData from \"../MovieData\";\n\n\nexport default class SearchPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"search-page\">\n                    <form onSubmit={this.handleSubmit} className=\"search-form\">\n                        <input type=\"text\" className=\"searchInput\" value={this.state.value}\n                               onChange={this.handleChange}/>\n                        <Link to={`/search/${this.state.value}`}>\n                            <button className=\"searchbtn\">\n                                Search\n                            </button>\n                        </Link>\n                    </form>\n\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\n\n\n","import React from 'react';\n\nimport './App.css';\nimport MovieData from \"./MovieData\"\nimport './moviedatabase'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport MovieDetails from './MovieDetails'\nimport SearchPage from \"./SearchPage\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n\n                <Route path=\"/moviedetails/:id\" component={MovieDetails}>\n\n                </Route>\n                <Route path=\"/search/:searchQuery\" component={MovieData}/>\n                <Route path=\"/page/:page\" component={MovieData}/>\n\n                {/*<Route exact path=\"/movie_grid\" component={MovieData}>*/}\n                {/*</Route>*/}\n                <Route exact path=\"/search\" component={SearchPage}/>\n\n                <Route path=\"/\">\n                    <MovieData>\n\n                    </MovieData>\n                </Route>\n\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}